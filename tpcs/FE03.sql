

-- 1
CREATE VIEW emp_detail AS 
    SELECT e.EMPLOYEE_ID, concat(e.FIRST_NAME,e.LAST_NAME) as nome_func, e.EMAIL, e.PHONE_NUMBER, 
        e.SALARY, concat(man.FIRST_NAME,man.LAST_NAME) as nome_manager, j.JOB_TITLE, d.DEPARTMENT_NAME, 
        l.CITY, c.COUNTRY_NAME 
            FROM EMPLOYEES e, EMPLOYEES man, JOBS j, DEPARTMENTS d, LOCATIONS l, COUNTRIES c 
                WHERE 
                   e.DEPARTMENT_ID = d.DEPARTMENT_ID AND  
                   e.JOB_ID = j.JOB_ID AND
                   man.EMPLOYEE_ID = e.EMPLOYEE_ID AND 
                   d.LOCATION_ID = l.LOCATION_ID AND 
                   l.COUNTRY_ID = c.COUNTRY_ID; 

-- a)

INSERT INTO EMPLOYEES (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, 
                       HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID) 
VALUES ('Luis','Braga','LBRAGA',652532,sysdate,'IT_PROG',10000,0.5,103,60); 

SELECT * 
FROM emp_detail
WHERE EMAIL = 'LBRAGA';

             
-- 2 
-- a) 
ALTER TABLE EMPLOYEES 
    ADD (EXTRA_SALARY NUMBER(8), EXTRA_HOURS NUMBER(4));   

UPDATE EMPLOYEES SET EXTRA_SALARY = 0, EXTRA_HOURS = 0;

-- b)

CREATE OR REPLACE PROCEDURE act_extra (extra_hours IN NUMBER, id IN NUMBER)
IS
BEGIN
    UPDATE EMPLOYEES
    SET EXTRA_HOURS = extra_hours
    WHERE EMPLOYEE_ID = id;
END;
/

-- c)

CREATE OR REPLACE PROCEDURE salary_calc (percentage IN NUMBER, id IN NUMBER)
IS
BEGIN
    UPDATE EMPLOYEES
    SET EXTRA_SALARY = percentage * SALARY * EXTRA_HOURS
    WHERE EMPLOYEE_ID = id;
END;
/

-- d)

BEGIN
    FOR r IN (SELECT e.EMPLOYEE_ID AS id 
              FROM EMPLOYEES e, DEPARTMENTS d, LOCATIONS l
              WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID AND
                    d.LOCATION_ID = l.LOCATION_ID AND
                    l.CITY = 'Southlake') LOOP
        UPDATE EMPLOYEES
        SET EXTRA_HOURS = 90
        WHERE EMPLOYEE_ID = r.id;
        
        salary_calc(0.05, r.id);
        
    END LOOP;
END;

-- e)

SELECT CONCAT(FIRST_NAME, CONCAT(' ', LAST_NAME)) AS NOME, SALARY AS VENCIMENTO_BASE, (SALARY + EXTRA_SALARY) AS VENCIMENTO_E_HORAS_EXTRA
FROM EMPLOYEES e, DEPARTMENTS d, LOCATIONS l
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID AND
      d.LOCATION_ID = l.LOCATION_ID AND
      l.CITY = 'Southlake';

-- 3

CREATE OR REPLACE FUNCTION da_salario (id IN NUMBER)
    RETURN NUMBER
    IS salario NUMBER(8,2);
BEGIN
    SELECT (e.SALARY + e.EXTRA_SALARY)
    INTO salario
    FROM EMPLOYEES e
    WHERE e.EMPLOYEE_ID = id;

RETURN(salario);

END da_salario;

-- a)

SELECT EMPLOYEE_ID, CONCAT(FIRST_NAME,CONCAT(' ', LAST_NAME)), EMAIL
FROM EMPLOYEES
WHERE da_salario(EMPLOYEE_ID) > 20000;

-- 4)

CREATE TABLE TOTAL_COSTS
(
    TOTAL_EXTRA_HOURS NUMBER(8,2) NOT NULL,
    TOTAL_ORD_BASE NUMBER(8,2) NOT NULL
);


-- a)

INSERT INTO TOTAL_COSTS (TOTAL_EXTRA_HOURS, TOTAL_ORD_BASE)
VALUES ((SELECT SUM(EXTRA_SALARY) FROM EMPLOYEES), (SELECT SUM(SALARY) FROM EMPLOYEES));


-- b)

BEGIN
    DECLARE
        seqval NUMBER(8,2);
    BEGIN
      SELECT MAX(nvl(EMPLOYEE_ID,0))+1
      INTO seqval
      FROM EMPLOYEES;
    
      execute immediate('CREATE SEQUENCE employee_sq MINVALUE 0 START WITH '||seqval||' INCREMENT BY 1 NOCACHE NOCYCLE');
      END;
END;
/

-- c)

CREATE OR REPLACE TRIGGER salary_value
    AFTER INSERT OR DELETE OR UPDATE ON EMPLOYEES
    FOR EACH ROW
    BEGIN
        IF INSERTING THEN
            BEGIN
                UPDATE TOTAL_COSTS
                SET TOTAL_EXTRA_HOURS = TOTAL_EXTRA_HOURS + :NEW.EXTRA_SALARY ,
                    TOTAL_ORD_BASE = TOTAL_ORD_BASE + :NEW.SALARY;
            END;
        ELSIF UPDATING THEN
            BEGIN
                UPDATE TOTAL_COSTS
                SET TOTAL_EXTRA_HOURS = TOTAL_EXTRA_HOURS - :OLD.EXTRA_SALARY + :NEW.EXTRA_SALARY ,
                    TOTAL_ORD_BASE = TOTAL_ORD_BASE - :OLD.SALARY + :NEW.SALARY;
            END;
        ELSIF DELETING THEN
            BEGIN
                UPDATE TOTAL_COSTS
                SET TOTAL_EXTRA_HOURS = TOTAL_EXTRA_HOURS - :OLD.EXTRA_SALARY ,
                    TOTAL_ORD_BASE = TOTAL_ORD_BASE - :OLD.SALARY;
            END;
        END IF;
    END;
/

-- d)

INSERT INTO EMPLOYEES (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, 
                       HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, 
                       MANAGER_ID, DEPARTMENT_ID, EXTRA_SALARY) 
VALUES ('Manuel', 'Sousa', 'MSOUSA', 913328931, sysdate, 'IT_PROG', 10000, 0.5, 103, 60, 400);

SELECT * FROM TOTAL_COSTS;

-- e)

UPDATE EMPLOYEES
SET SALARY = 15000
WHERE EMPLOYEE_ID = 40;

SELECT * FROM TOTAL_COSTS;

-- f)

DELETE FROM EMPLOYEES
WHERE EMPLOYEE_ID = (SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEES)
                     ORDER BY EMPLOYEE_ID 
                     FETCH NEXT 1 ROWS ONLY);

SELECT * FROM TOTAL_COSTS;







